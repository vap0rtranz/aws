{
  "Description": "Create instances ready for CodeDeploy: Create up to 3 Amazon EC2 instances with an associated instance profile and install the AWS CodeDeploy Agent. **WARNING** This template creates one or more Amazon EC2 instances. You will be billed for the AWS resources used if you create a stack from this template.",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "TagKey": {
      "Description": "The tag key that identifies this as a target for deployments.",
      "Type": "String",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "TagValue": {
      "Description": "The tag value that identifies this as a target for deployments.",
      "Type": "String",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "KeyPairName": {
      "Description": "Name of an existing Amazon EC2 key pair to enable SSH or RDP access to the instances.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "InstanceType": {
      "Description": "Amazon EC2 instance type.",
      "Type": "String",
      "Default": "t1.micro",
      "ConstraintDescription": "Must be a valid Amazon EC2 instance type."
    },
    "InstanceCount": {
      "Description": "Number of Amazon EC2 instances.",
      "Type": "Number",
      "Default": "1",
      "ConstraintDescription": "Must be a number between 1 and 3.",
      "MinValue": "1",
      "MaxValue": "3"
    },
    "OperatingSystem": {
      "Description": "Amazon EC2 operating system type.",
      "Type": "String",
      "Default": "Linux",
      "ConstraintDescription": "Must be Windows or Linux.",
      "AllowedValues": [
        "Linux",
        "Windows"
      ]
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to connect using SSH or RDP to the Amazon EC2 instances.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings": {
    "RegionOS2AMI": {
      "us-east-1": {
        "Linux": "ami-7c807d14",
        "Windows": "ami-c9cea0ac"
      },
      "us-west-2": {
        "Linux": "ami-1b3b462b",
        "Windows": "REPLACE"
      },
      "eu-west-1": {
        "Linux": "ami-672ce210",
        "Windows": "REPLACE"
      },
      "ap-southeast-2": {
        "Linux": "ami-6bf99c51",
        "Windows": "REPLACE"
      },
      "ap-southeast-1": {
        "Linux": "ami-56b7eb04",
        "Windows": "REPLACE"
      },
      "us-west-1": {
        "Linux": "ami-a8d3d4ed",
        "Windows": "REPLACE"
      },
      "eu-central-1": {
        "Linux": "ami-14487e09",
        "Windows": "REPLACE"
      },
      "ap-northeast-1": {
        "Linux": "ami-25dd9324",
        "Windows": "REPLACE"
      },
      "sa-east-1": {
        "Linux": "ami-c7e649da",
        "Windows": "REPLACE"
      }
    },
    "OS2SSHPort": {
      "Linux": {
        "SSHPort": "22"
      },
      "Windows": {
        "SSHPort": "3389"
      }
    }
  },
  "Conditions": {
    "LaunchInstance2": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            "2",
            {
              "Ref": "InstanceCount"
            }
          ]
        },
        {
          "Fn::Equals": [
            "3",
            {
              "Ref": "InstanceCount"
            }
          ]
        }
      ]
    },
    "LaunchInstance3": {
      "Fn::Equals": [
        "3",
        {
          "Ref": "InstanceCount"
        }
      ]
    },
    "LaunchLinuxEC2Instance1": {
      "Fn::Equals": [
        {
          "Ref": "OperatingSystem"
        },
        "Linux"
      ]
    },
    "LaunchLinuxEC2Instance2": {
      "Fn::And": [
        {
          "Condition": "LaunchLinuxEC2Instance1"
        },
        {
          "Condition": "LaunchInstance2"
        }
      ]
    },
    "LaunchLinuxEC2Instance3": {
      "Fn::And": [
        {
          "Condition": "LaunchLinuxEC2Instance1"
        },
        {
          "Condition": "LaunchInstance3"
        }
      ]
    },
    "LaunchWindowsEC2Instance1": {
      "Fn::Equals": [
        {
          "Ref": "OperatingSystem"
        },
        "Windows"
      ]
    },
    "LaunchWindowsEC2Instance2": {
      "Fn::And": [
        {
          "Condition": "LaunchWindowsEC2Instance1"
        },
        {
          "Condition": "LaunchInstance2"
        }
      ]
    },
    "LaunchWindowsEC2Instance3": {
      "Fn::And": [
        {
          "Condition": "LaunchWindowsEC2Instance1"
        },
        {
          "Condition": "LaunchInstance3"
        }
      ]
    }
  },
  "Resources": {
    "LinuxEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Condition": "LaunchLinuxEC2Instance1",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "services": {
            "sysvint": {
              "codedeploy-agent": {
                "enabled": "true",
                "ensureRunning": "true"
              }
            }
          }
        },
        "AWS::CloudFormation::Designer": {
          "id": "5164be05-27e1-4f5e-899c-4a0cdec59da6"
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionOS2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "OperatingSystem"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",
                "yum update -y aws-cfn-bootstrap\n",
                "yum install -y aws-cli\n",
                "# Helper function.\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "# Install the AWS CodeDeploy Agent.\n",
                "cd /home/ec2-user/\n",
                "aws s3 cp 's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm' . || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
                "yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.' \n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r LinuxEC2Instance --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init.'\n",
                "# All is well, so signal success.\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"AWS CodeDeploy Agent setup complete.\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n"
              ]
            ]
          }
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "Tags": [
          {
            "Key": {
              "Ref": "TagKey"
            },
            "Value": {
              "Ref": "TagValue"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        }
      }
    },
    "WindowsEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Condition": "LaunchWindowsEC2Instance1",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "00-download-host-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe -Command \"Read-S3Object ",
                      "-BucketName aws-codedeploy-us-east-1 ",
                      "-Key latest/codedeploy-agent.msi ",
                      "-File codedeploy-agent.msi\""
                    ]
                  ]
                },
                "cwd": "C:/cfn",
                "waitAfterCompletion": 0
              },
              "01-install-host-agent": {
                "command": "C:\\cfn\\codedeploy-agent.msi /quiet /l C:\\cfn\\host-agent-install-log.txt",
                "ignoreErrors": "true",
                "waitAfterCompletion": 0
              },
              "02-signal-ready": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "\"C:\\Program Files\\Amazon\\cfn-bootstrap\\cfn-signal\"",
                      " -e 0 \"",
                      {
                        "Ref": "WaitHandle"
                      },
                      "\""
                    ]
                  ]
                },
                "waitAfterCompletion": 0
              }
            },
            "services": {
              "windows": {
                "codedeploy-agent": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "commands": [
                    "01-install-host-agent"
                  ]
                }
              }
            }
          }
        },
        "AWS::CloudFormation::Designer": {
          "id": "25a392e5-c25b-431c-926b-a9da4872e4d4"
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionOS2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "OperatingSystem"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>\n",
                "mkdir c:\\cfn\n",
                "mkdir c:\\cfn\\log\n",
                "c:\\\"Program Files\"\\Amazon\\cfn-bootstrap\\cfn-init.exe -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " -r WindowsEC2Instance > c:\\cfn\\log\\cfn-call-log 2>&1",
                "</script>"
              ]
            ]
          }
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "Tags": [
          {
            "Key": {
              "Ref": "TagKey"
            },
            "Value": {
              "Ref": "TagValue"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        }
      }
    },
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "1ac0bc9a-41da-4466-84ce-d2564530b37a"
        }
      }
    },
    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Count": {
          "Ref": "InstanceCount"
        },
        "Handle": {
          "Ref": "WaitHandle"
        },
        "Timeout": "900"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "e68787d8-e4de-41ab-95f4-22912f00a1f6"
        }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access via port 80 and SSH access.",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": {
              "Fn::FindInMap": [
                "OS2SSHPort",
                {
                  "Ref": "OperatingSystem"
                },
                "SSHPort"
              ]
            },
            "ToPort": {
              "Fn::FindInMap": [
                "OS2SSHPort",
                {
                  "Ref": "OperatingSystem"
                },
                "SSHPort"
              ]
            },
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "e8b447a7-ef6f-4ea4-b9be-ac7d071a007d"
        }
      }
    },
    "CodeDeployTrustRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Principal": {
                "Service": "codedeploy.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "b314934d-0b7e-485a-bacf-519319679efe"
        }
      }
    },
    "CodeDeployRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CodeDeployPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "ec2:Describe*"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:PutLifecycleHook",
                "autoscaling:RecordLifecycleActionHeartbeat"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "Tag:getResources",
                "Tag:getTags",
                "Tag:getTagsForResource",
                "Tag:getTagsForResourceList"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployTrustRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "de5a7c4d-c854-4d4a-8270-912d197c1ecc"
        }
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "5e638183-f4b1-4d82-bcce-445164bc9526"
        }
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:Describe*",
                "cloudformation:Describe*",
                "cloudformation:GetTemplate",
                "s3:Get*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "e71c955d-b679-4e28-b2ac-84f24d18fefe"
        }
      }
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "6fd5f80f-d015-4c71-a9f5-0167a1be53c8"
        }
      }
    },
    "LinuxEC2Instance2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "LaunchLinuxEC2Instance2",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "services": {
            "sysvint": {
              "codedeploy-agent": {
                "enabled": "true",
                "ensureRunning": "true"
              }
            }
          }
        },
        "AWS::CloudFormation::Designer": {
          "id": "38b514c3-f0da-4b02-80b2-a94b1cab690f"
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionOS2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "OperatingSystem"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",
                "yum update -y aws-cfn-bootstrap\n",
                "yum install -y aws-cli\n",
                "# Helper function.\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "# Install the AWS CodeDeploy Agent.\n",
                "cd /home/ec2-user/\n",
                "aws s3 cp 's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm' . || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
                "yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.' \n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r LinuxEC2Instance --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init.'\n",
                "# All is well, so signal success.\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"AWS CodeDeploy Agent setup complete.\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n"
              ]
            ]
          }
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "Tags": [
          {
            "Key": {
              "Ref": "TagKey"
            },
            "Value": {
              "Ref": "TagValue"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        }
      }
    },
    "WindowsEC2Instance2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "LaunchWindowsEC2Instance2",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "00-download-host-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe -Command \"Read-S3Object ",
                      "-BucketName aws-codedeploy-us-east-1 ",
                      "-Key latest/codedeploy-agent.msi ",
                      "-File codedeploy-agent.msi\""
                    ]
                  ]
                },
                "cwd": "C:/cfn",
                "waitAfterCompletion": 0
              },
              "01-install-host-agent": {
                "command": "C:\\cfn\\codedeploy-agent.msi /quiet /l C:\\cfn\\host-agent-install-log.txt",
                "ignoreErrors": "true",
                "waitAfterCompletion": 0
              },
              "02-signal-ready": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "\"C:\\Program Files\\Amazon\\cfn-bootstrap\\cfn-signal\"",
                      " -e 0 \"",
                      {
                        "Ref": "WaitHandle"
                      },
                      "\""
                    ]
                  ]
                },
                "waitAfterCompletion": 0
              }
            },
            "services": {
              "windows": {
                "codedeploy-agent": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "commands": [
                    "01-install-host-agent"
                  ]
                }
              }
            }
          }
        },
        "AWS::CloudFormation::Designer": {
          "id": "ce3a07fb-330a-4072-bb09-d5ea6c93000b"
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionOS2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "OperatingSystem"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>\n",
                "mkdir c:\\cfn\n",
                "mkdir c:\\cfn\\log\n",
                "c:\\\"Program Files\"\\Amazon\\cfn-bootstrap\\cfn-init.exe -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " -r WindowsEC2Instance > c:\\cfn\\log\\cfn-call-log 2>&1",
                "</script>"
              ]
            ]
          }
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "Tags": [
          {
            "Key": {
              "Ref": "TagKey"
            },
            "Value": {
              "Ref": "TagValue"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        }
      }
    },
    "LinuxEC2Instance3": {
      "Type": "AWS::EC2::Instance",
      "Condition": "LaunchLinuxEC2Instance3",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "services": {
            "sysvint": {
              "codedeploy-agent": {
                "enabled": "true",
                "ensureRunning": "true"
              }
            }
          }
        },
        "AWS::CloudFormation::Designer": {
          "id": "82916a69-335b-45b5-806a-58bd5d8ee8de"
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionOS2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "OperatingSystem"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",
                "yum update -y aws-cfn-bootstrap\n",
                "yum install -y aws-cli\n",
                "# Helper function.\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "# Install the AWS CodeDeploy Agent.\n",
                "cd /home/ec2-user/\n",
                "aws s3 cp 's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm' . || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
                "yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.' \n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r LinuxEC2Instance --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init.'\n",
                "# All is well, so signal success.\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"AWS CodeDeploy Agent setup complete.\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n"
              ]
            ]
          }
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "Tags": [
          {
            "Key": {
              "Ref": "TagKey"
            },
            "Value": {
              "Ref": "TagValue"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        }
      }
    },
    "WindowsEC2Instance3": {
      "Type": "AWS::EC2::Instance",
      "Condition": "LaunchWindowsEC2Instance3",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "00-download-host-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe -Command \"Read-S3Object ",
                      "-BucketName aws-codedeploy-us-east-1 ",
                      "-Key latest/codedeploy-agent.msi ",
                      "-File codedeploy-agent.msi\""
                    ]
                  ]
                },
                "cwd": "C:/cfn",
                "waitAfterCompletion": 0
              },
              "01-install-host-agent": {
                "command": "C:\\cfn\\codedeploy-agent.msi /quiet /l C:\\cfn\\host-agent-install-log.txt",
                "ignoreErrors": "true",
                "waitAfterCompletion": 0
              },
              "02-signal-ready": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "\"C:\\Program Files\\Amazon\\cfn-bootstrap\\cfn-signal\"",
                      " -e 0 \"",
                      {
                        "Ref": "WaitHandle"
                      },
                      "\""
                    ]
                  ]
                },
                "waitAfterCompletion": 0
              }
            },
            "services": {
              "windows": {
                "codedeploy-agent": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "commands": [
                    "01-install-host-agent"
                  ]
                }
              }
            }
          }
        },
        "AWS::CloudFormation::Designer": {
          "id": "184f5ded-2a75-402b-8fd9-49ec5fd9c2a0"
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionOS2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "OperatingSystem"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>\n",
                "mkdir c:\\cfn\n",
                "mkdir c:\\cfn\\log\n",
                "c:\\\"Program Files\"\\Amazon\\cfn-bootstrap\\cfn-init.exe -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " -r WindowsEC2Instance > c:\\cfn\\log\\cfn-call-log 2>&1",
                "</script>"
              ]
            ]
          }
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "Tags": [
          {
            "Key": {
              "Ref": "TagKey"
            },
            "Value": {
              "Ref": "TagValue"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        }
      }
    }
  },
  "Outputs": {
    "CodeDeployTrustRoleARN": {
      "Value": {
        "Fn::GetAtt": [
          "CodeDeployTrustRole",
          "Arn"
        ]
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Designer": {
      "5e638183-f4b1-4d82-bcce-445164bc9526": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 90
        },
        "z": 1,
        "embeds": []
      },
      "6fd5f80f-d015-4c71-a9f5-0167a1be53c8": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 90
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "5e638183-f4b1-4d82-bcce-445164bc9526"
        ]
      },
      "e71c955d-b679-4e28-b2ac-84f24d18fefe": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 210
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "5e638183-f4b1-4d82-bcce-445164bc9526"
        ]
      },
      "b314934d-0b7e-485a-bacf-519319679efe": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 210
        },
        "z": 1,
        "embeds": []
      },
      "de5a7c4d-c854-4d4a-8270-912d197c1ecc": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 300,
          "y": 90
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "b314934d-0b7e-485a-bacf-519319679efe"
        ]
      },
      "e8b447a7-ef6f-4ea4-b9be-ac7d071a007d": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 300,
          "y": 210
        },
        "z": 1,
        "embeds": []
      },
      "184f5ded-2a75-402b-8fd9-49ec5fd9c2a0": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 330
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "e8b447a7-ef6f-4ea4-b9be-ac7d071a007d"
        ],
        "isrelatedto": [
          "6fd5f80f-d015-4c71-a9f5-0167a1be53c8"
        ]
      },
      "ce3a07fb-330a-4072-bb09-d5ea6c93000b": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 330
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "e8b447a7-ef6f-4ea4-b9be-ac7d071a007d"
        ],
        "isrelatedto": [
          "6fd5f80f-d015-4c71-a9f5-0167a1be53c8"
        ]
      },
      "1ac0bc9a-41da-4466-84ce-d2564530b37a": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 300,
          "y": 330
        },
        "z": 1,
        "embeds": []
      },
      "82916a69-335b-45b5-806a-58bd5d8ee8de": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 420,
          "y": 90
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "e8b447a7-ef6f-4ea4-b9be-ac7d071a007d"
        ],
        "isrelatedto": [
          "1ac0bc9a-41da-4466-84ce-d2564530b37a",
          "6fd5f80f-d015-4c71-a9f5-0167a1be53c8"
        ]
      },
      "38b514c3-f0da-4b02-80b2-a94b1cab690f": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 420,
          "y": 210
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "e8b447a7-ef6f-4ea4-b9be-ac7d071a007d"
        ],
        "isrelatedto": [
          "1ac0bc9a-41da-4466-84ce-d2564530b37a",
          "6fd5f80f-d015-4c71-a9f5-0167a1be53c8"
        ]
      },
      "e68787d8-e4de-41ab-95f4-22912f00a1f6": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 420,
          "y": 330
        },
        "z": 1,
        "embeds": [],
        "references": [
          "1ac0bc9a-41da-4466-84ce-d2564530b37a"
        ]
      },
      "25a392e5-c25b-431c-926b-a9da4872e4d4": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 450
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "e8b447a7-ef6f-4ea4-b9be-ac7d071a007d"
        ],
        "isrelatedto": [
          "6fd5f80f-d015-4c71-a9f5-0167a1be53c8"
        ]
      },
      "5164be05-27e1-4f5e-899c-4a0cdec59da6": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 450
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "e8b447a7-ef6f-4ea4-b9be-ac7d071a007d"
        ],
        "isrelatedto": [
          "1ac0bc9a-41da-4466-84ce-d2564530b37a",
          "6fd5f80f-d015-4c71-a9f5-0167a1be53c8"
        ]
      }
    }
  }
}